# 기본 설정
spring.application.name=ZIPKOK
server.port=8080

# 터미널 출력 관련 설정
spring.output.ansi.enabled=always
logging.level.com.ssafy=trace
logging.pattern.console=\
    %clr(%d{yyyy/MM/dd HH:mm:ss.SSS}){faint} \
    %clr([%thread]){magenta} \
    %clr([%-5level]){TRACE=cyan,DEBUG=blue,INFO=green,WARN=red,ERROR=red} \
    %clr(%logger{5}){cyan bold} \
    - %msg%n
logging.charset.console=EUC-KR
logging.charset.file=EUC-KR
# logging.level.org.springframework.ai.chat.client.advisor=DEBUG

# file 저장 위치
spring.servlet.multipart.location=${user.home}/uploads
# 메모리에 저장하는 최대 크기
spring.servlet.multipart.file-size-threshold=10MB   
# 파일당 최대 크기
spring.servlet.multipart.max-file-size=10MB         
# 여러 파일 업로드 시 최대 크기
spring.servlet.multipart.max-request-size=50MB    

# DB 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://api.ssafy.blog:3306/ssafyproj?serverTimezone=UTC
spring.datasource.username=maple
spring.datasource.password=story

spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.connection-timeout=600000
spring.datasource.hikari.data-source-properties.profileSQL=true


# DTO가 있는 곳을 지정해서 mapper에서 fully qualified name을 사용하지 않고 클래스만 사용 가능
mybatis.type-aliases-package=com.ssafy.house.*.dto

# 깊이에 상관 없이 /mappers의 모든 하위 경로에 있는 모든 xml 문서를 사용
mybatis.mapper-locations=classpath*:mappers/**/*.xml
mybatis.configuration.map-underscore-to-camel-case=true

# 서비스 키
spring.ai.openai.api-key=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
# 사용할 OpenAI chat model의 이름
spring.ai.openai.chat.options.model=gpt-4o
# 창의성을 제어하는데 사용되는 샘플링 온도: 높을 수록 창의성이 높아짐
spring.ai.openai.chat.options.temperature=0.5
# 출력과 추론에 사용되는 토큰 수의 상한선
spring.ai.openai.chat.options.maxCompletionTokens=10000

# redis 서버 URL
spring.ai.vectorstore.redis.uri=redis://api.ssafy.blog:6379
# schema 초기화 여부
spring.ai.vectorstore.redis.initialize-schema=false
# 인덱스 이름
spring.ai.vectorstore.redis.index=ssafy-index
# 접두사
spring.ai.vectorstore.redis.prefix=ssafy:

# system prompt
ssafy.ai.custom-system-prompt= When you speak, use {language} and answer with a {character} personality. And provide detailed information.\n\
Context information is below, surrounded by ---------------------\n\
\\{Real Estate Context\}\n\
0. **aptSeqList must contain **only** apt_seq values** exactly as returned by the tool, with no extra prefixes, labels, or other text.\n\
1. The user may provide administrative region information (city/county/district/town/village) or apartment names.\n\
2. You must answer real estate-related questions based on the provided location and housing information.\n\
3. If the user asks about Sales and lease information, you provide detailed insights based on found data.\n\
4. If there is no data, you can say "please give more specific region information or apartment name".\n\
---------------------\n\
\\{General Question Context\\}\n\
This prompt provides background information for general user questions outside the real estate context.\n\
You must follow these guidelines:\n\
1. If the user asks about topics not related to real estate (e.g., travel, cooking, health, coding, hobbies), respond accurately and courteously with expertise.\n\
2. Provide responses concisely and clearly in Korean, and include the original English term in parentheses for important terminology (e.g., API (Application Programming Interface)).\n\
3. If the user requests additional examples or detailed explanations, include at least one example with quantitative data.\n\
4. Maintain a respectful, peer-level tone without moralizing.\n\
5. If information cannot be provided, honestly state ("This information cannot be provided"), and suggest a useful alternative direction.\n\
---------------------\n\
\\{Output Schema\\}\n\
Always respond in JSON format, including these fields. Important: aptSeqList must include all apt_seq entries without omission or truncation.:\n\
If the user's Question is not related to real estate, there's no need to fill aptSeqList:\n\
1. message (String): A natural-language answer easy for the user to understand.\n\
2. aptSeqList (List<String>): All apt_seq found in response to the user's question.\n\
3. relatedQuestionList (List<String>): A list of related questions that the user might ask. Max 3 questions\n\
4. convoId (String): The conversation ID for the current session. no need to fill\n\
Example for just search:\n\
\\{\n\
  \"message\": \"A total of 12 real estate listings were found in Gangnam-gu.\",\n\
  \"aptSeqList\": [\"12345-678\", \"12345-012\"]\n\
  \"relatedQuestionList\": [\"What is the average price of apartments in Gangnam-gu?\", \"Find apartments in Gangnam-gu\"]\n\
  \"convoId\": \"1234567890\"\n\
\\}\n\
Example for detailed analysis:\n\
\\{\n\
  \"message\": \"By comparing the sale prices (average KRW 850 million) and the jeonse deposits (average KRW 420 million) of the two sample listings (aptSeq: 11111-111, 22222-222), we observe that sale prices are about twice the jeonse amounts. This suggests strong tenant demand to reduce purchase risk, keeping jeonse prices stable.\",\n\
  \"aptSeqList\": [\"12345-678\", \"12345-012\"]\n\
  \"relatedQuestionList\": [\"Can I also check the monthly rental listings for these apartments?\", \"What is the average jeonse ratio (security deposit ratio) in this area?\"]\n\
  \"convoId\": \"1234567890\"\n\
\\}\n\
---------------------\n\

jwt.secret=Lj2v5vY4phZcI2s0j6Pn9R7iK1uQxN8aFmOeGtH2KkY=
jwt.expirationMs=3600000

#schema 초기화 여부
spring.sql.init.mode=always

# 1) 캐시 타입을 Caffeine 으로 설정
spring.cache.type=caffeine

# 2) 각 캐시별 만료·최대 크기 설정
spring.cache.caffeine.specs.recommendRecent=maximumSize=500,expireAfterWrite=5m
spring.cache.caffeine.specs.recommendMost=maximumSize=500,expireAfterWrite=10m
spring.cache.caffeine.specs.recommendComposite=maximumSize=500,expireAfterWrite=30m