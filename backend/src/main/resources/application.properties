# 기본 설정
spring.application.name=ZIPKOK
server.port=8080

# 터미널 출력 관련 설정
spring.output.ansi.enabled=always
logging.level.com.ssafy=trace
logging.pattern.console=\
    %clr(%d{yyyy/MM/dd HH:mm:ss.SSS}){faint} \
    %clr([%thread]){magenta} \
    %clr([%-5level]){TRACE=cyan,DEBUG=blue,INFO=green,WARN=red,ERROR=red} \
    %clr(%logger{5}){cyan bold} \
    - %msg%n
logging.charset.console=EUC-KR
logging.charset.file=EUC-KR
# logging.level.org.springframework.ai.chat.client.advisor=DEBUG

# jsp 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# file 저장 위치
spring.servlet.multipart.location=${user.home}/uploads
# 메모리에 저장하는 최대 크기
spring.servlet.multipart.file-size-threshold=10MB   
# 파일당 최대 크기
spring.servlet.multipart.max-file-size=10MB         
# 여러 파일 업로드 시 최대 크기
spring.servlet.multipart.max-request-size=50MB    

# DB 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://api.ssafy.blog:3306/ssafyproj?serverTimezone=UTC
spring.datasource.username=maple
spring.datasource.password=story

spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.connection-timeout=600000
spring.datasource.hikari.data-source-properties.profileSQL=true


# DTO가 있는 곳을 지정해서 mapper에서 fully qualified name을 사용하지 않고 클래스만 사용 가능
mybatis.type-aliases-package=com.ssafy.house.*.dto

# 깊이에 상관 없이 /mappers의 모든 하위 경로에 있는 모든 xml 문서를 사용
mybatis.mapper-locations=classpath*:mappers/**/*.xml
mybatis.configuration.map-underscore-to-camel-case=true


# API Keys
api.key_vworld=83F70F59-D916-3DBE-BD0C-F43C89012750
api.key_sgis_service_id=7b8b0bb22aff40839632
api.key_sgis_security=d8abd928823f43ddb25c
api.key_data=+xKtZsb/IgQ06uRogB7j8QPlujQ7pYG8ngkSehgenFUVpwtdhZn9AGRzgZdPIJm2Y6tqn+iW0hmzbkyYZQ7Tqg==

# openai
# openai.api.key=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

# 서비스 키
spring.ai.openai.api-key=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
# 사용할 OpenAI chat model의 이름
spring.ai.openai.chat.options.model=gpt-4o
# 창의성을 제어하는데 사용되는 샘플링 온도: 높을 수록 창의성이 높아짐 - 뻘소리할 확율도.. (0~2)
spring.ai.openai.chat.options.temperature=0.7
# 출력과 추론에 사용되는 토큰 수의 상한선
spring.ai.openai.chat.options.maxCompletionTokens=10000

# redis 서버 URL
spring.ai.vectorstore.redis.uri=redis://api.ssafy.blog:6379
# schema 초기화 여부
spring.ai.vectorstore.redis.initialize-schema=false
# 인덱스 이름
spring.ai.vectorstore.redis.index=ssafy-index
# 접두사
spring.ai.vectorstore.redis.prefix=ssafy:
# system prompt
ssafy.ai.system-prompt=You are an artificial intelligence known as an '신창섭'. When you speak, use {language} and answer with a {character} personality.
ssafy.ai.rag-prompt=Context information is below, surrounded by ---------------------\
\
---------------------\
{question_answer_context}\
---------------------\
\
Given the context and provided history information, reply to the user comment based strictly on the information in the context.\
If the answer is not found in the context, inform the user: "I don't have specific information about this in my knowledge base" and then you may provide a general response based on your training. \
Otherwise, provide a comprehensive answer using only the information from the context. \

jwt.secret=Lj2v5vY4phZcI2s0j6Pn9R7iK1uQxN8aFmOeGtH2KkY=
jwt.expirationMs=3600000

#schema 초기화 여부
spring.sql.init.mode=always

# 1) 캐시 타입을 Caffeine 으로 설정
spring.cache.type=caffeine

# 2) 각 캐시별 만료·최대 크기 설정
spring.cache.caffeine.specs.recommendRecent=maximumSize=500,expireAfterWrite=5m
spring.cache.caffeine.specs.recommendMost=maximumSize=500,expireAfterWrite=10m
spring.cache.caffeine.specs.recommendComposite=maximumSize=500,expireAfterWrite=30m